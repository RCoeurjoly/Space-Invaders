; SMT-LIBv2 description generated by Yosys 0.8+143 (git sha1 c4b61f2, clang 3.8.0-2ubuntu4 -fPIC -Os)
; yosys-smt2-module gameplay
(declare-sort |gameplay_s| 0)
(declare-fun |gameplay_is| (|gameplay_s|) Bool)
; yosys-smt2-output o_gameplay 2
; yosys-smt2-register o_gameplay 2
; yosys-smt2-wire o_gameplay 2
(declare-fun |gameplay#0| (|gameplay_s|) (_ BitVec 2)) ; \o_gameplay
(define-fun |gameplay_n o_gameplay| ((state |gameplay_s|)) (_ BitVec 2) (|gameplay#0| state))
; yosys-smt2-input i_reset 1
; yosys-smt2-wire i_reset 1
(declare-fun |gameplay#1| (|gameplay_s|) Bool) ; \i_reset
(define-fun |gameplay_n i_reset| ((state |gameplay_s|)) Bool (|gameplay#1| state))
; yosys-smt2-input i_invaders_line 4
; yosys-smt2-wire i_invaders_line 4
(declare-fun |gameplay#2| (|gameplay_s|) (_ BitVec 4)) ; \i_invaders_line
(define-fun |gameplay_n i_invaders_line| ((state |gameplay_s|)) (_ BitVec 4) (|gameplay#2| state))
; yosys-smt2-input i_invaders_array 20
; yosys-smt2-wire i_invaders_array 20
(declare-fun |gameplay#3| (|gameplay_s|) (_ BitVec 20)) ; \i_invaders_array
(define-fun |gameplay_n i_invaders_array| ((state |gameplay_s|)) (_ BitVec 20) (|gameplay#3| state))
; yosys-smt2-input i_clk_25MHz 1
; yosys-smt2-wire i_clk_25MHz 1
; yosys-smt2-clock i_clk_25MHz posedge
(declare-fun |gameplay#4| (|gameplay_s|) Bool) ; \i_clk_25MHz
(define-fun |gameplay_n i_clk_25MHz| ((state |gameplay_s|)) Bool (|gameplay#4| state))
; yosys-smt2-register GAME_OVER_reached 1
; yosys-smt2-wire GAME_OVER_reached 1
(declare-fun |gameplay#5| (|gameplay_s|) (_ BitVec 1)) ; \GAME_OVER_reached
(define-fun |gameplay_n GAME_OVER_reached| ((state |gameplay_s|)) Bool (= ((_ extract 0 0) (|gameplay#5| state)) #b1))
; yosys-smt2-register $formal$gameplay.v:45$1_EN 1
(declare-fun |gameplay#6| (|gameplay_s|) (_ BitVec 1)) ; $formal$gameplay.v:45$1_EN
(define-fun |gameplay_n $formal$gameplay.v:45$1_EN| ((state |gameplay_s|)) Bool (= ((_ extract 0 0) (|gameplay#6| state)) #b1))
; yosys-smt2-register $formal$gameplay.v:45$1_CHECK 1
(declare-fun |gameplay#7| (|gameplay_s|) (_ BitVec 1)) ; $formal$gameplay.v:45$1_CHECK
(define-fun |gameplay_n $formal$gameplay.v:45$1_CHECK| ((state |gameplay_s|)) Bool (= ((_ extract 0 0) (|gameplay#7| state)) #b1))
; yosys-smt2-assert 0 gameplay.v:45
(define-fun |gameplay_a 0| ((state |gameplay_s|)) Bool (or (= ((_ extract 0 0) (|gameplay#7| state)) #b1) (not (= ((_ extract 0 0) (|gameplay#6| state)) #b1)))) ; $assert$gameplay.v:45$15
(define-fun |gameplay#8| ((state |gameplay_s|)) Bool (bvule (|gameplay#0| state) #b00)) ; $le$gameplay.v:45$10_Y
(define-fun |gameplay#9| ((state |gameplay_s|)) Bool (bvule (|gameplay#0| state) #b01)) ; $le$gameplay.v:45$11_Y
(define-fun |gameplay#10| ((state |gameplay_s|)) Bool (or  (|gameplay#8| state) false  (|gameplay#9| state) false)) ; $logic_or$gameplay.v:45$12_Y
(define-fun |gameplay#11| ((state |gameplay_s|)) Bool (and (or  (= ((_ extract 0 0) (|gameplay#5| state)) #b1) false) (or  (|gameplay#10| state) false))) ; $logic_and$gameplay.v:45$13_Y
(define-fun |gameplay#12| ((state |gameplay_s|)) Bool (not (or  (|gameplay#11| state) false))) ; $0$formal$gameplay.v:45$1_CHECK[0:0]$7
(define-fun |gameplay#13| ((state |gameplay_s|)) Bool (= (|gameplay#0| state) #b10)) ; $eq$gameplay.v:43$9_Y
(define-fun |gameplay#14| ((state |gameplay_s|)) (_ BitVec 1) (ite (|gameplay#13| state) #b1 (|gameplay#5| state))) ; $0\GAME_OVER_reached[0:0]
(define-fun |gameplay#15| ((state |gameplay_s|)) Bool (not (or  (= ((_ extract 0 0) (|gameplay#3| state)) #b1) (= ((_ extract 1 1) (|gameplay#3| state)) #b1) (= ((_ extract 2 2) (|gameplay#3| state)) #b1) (= ((_ extract 3 3) (|gameplay#3| state)) #b1) (= ((_ extract 4 4) (|gameplay#3| state)) #b1) (= ((_ extract 5 5) (|gameplay#3| state)) #b1) (= ((_ extract 6 6) (|gameplay#3| state)) #b1) (= ((_ extract 7 7) (|gameplay#3| state)) #b1) (= ((_ extract 8 8) (|gameplay#3| state)) #b1) (= ((_ extract 9 9) (|gameplay#3| state)) #b1) (= ((_ extract 10 10) (|gameplay#3| state)) #b1) (= ((_ extract 11 11) (|gameplay#3| state)) #b1) (= ((_ extract 12 12) (|gameplay#3| state)) #b1) (= ((_ extract 13 13) (|gameplay#3| state)) #b1) (= ((_ extract 14 14) (|gameplay#3| state)) #b1) (= ((_ extract 15 15) (|gameplay#3| state)) #b1) (= ((_ extract 16 16) (|gameplay#3| state)) #b1) (= ((_ extract 17 17) (|gameplay#3| state)) #b1) (= ((_ extract 18 18) (|gameplay#3| state)) #b1) (= ((_ extract 19 19) (|gameplay#3| state)) #b1)))) ; $eq$gameplay.v:31$5_Y
(define-fun |gameplay#16| ((state |gameplay_s|)) (_ BitVec 1) (ite (|gameplay#15| state) #b1 #b0)) ; $auto$wreduce.cc:350:run$35 [0]
(define-fun |gameplay#17| ((state |gameplay_s|)) Bool (= (|gameplay#2| state) #b1101)) ; $eq$gameplay.v:29$4_Y
(define-fun |gameplay#18| ((state |gameplay_s|)) (_ BitVec 2) (ite (|gameplay#17| state) #b10 (concat #b0 (|gameplay#16| state)))) ; $procmux$26_Y
(define-fun |gameplay#19| ((state |gameplay_s|)) (_ BitVec 2) (ite (|gameplay#1| state) (|gameplay#18| state) #b00)) ; $0\o_gameplay[1:0]
(define-fun |gameplay_a| ((state |gameplay_s|)) Bool 
  (|gameplay_a 0| state)
)
(define-fun |gameplay_u| ((state |gameplay_s|)) Bool true)
(define-fun |gameplay_i| ((state |gameplay_s|)) Bool (and
  (= (|gameplay#0| state) #b00) ; o_gameplay
  (= (= ((_ extract 0 0) (|gameplay#5| state)) #b1) false) ; GAME_OVER_reached
  (= (= ((_ extract 0 0) (|gameplay#6| state)) #b1) false) ; $formal$gameplay.v:45$1_EN
))
(define-fun |gameplay_h| ((state |gameplay_s|)) Bool true)
(define-fun |gameplay_t| ((state |gameplay_s|) (next_state |gameplay_s|)) Bool (and
  (= (ite (|gameplay#12| state) #b1 #b0) (|gameplay#7| next_state)) ; $procdff$32 $formal$gameplay.v:45$1_CHECK
  (= #b1 (|gameplay#6| next_state)) ; $procdff$33 $formal$gameplay.v:45$1_EN
  (= (|gameplay#14| state) (|gameplay#5| next_state)) ; $procdff$31 \GAME_OVER_reached
  (= (|gameplay#19| state) (|gameplay#0| next_state)) ; $procdff$34 \o_gameplay
)) ; end of module gameplay
; yosys-smt2-topmod gameplay
; end of yosys output
